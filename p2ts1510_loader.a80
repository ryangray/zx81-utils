; TS1015 loader program
; Unified from original codes in existing carts to be generic, allowing for a
; program, and optionally the variables, to be stored in potentially in two 
; ROMs, where either the program is split into two parts, or the variables are
; split into two parts. The part info is stored at the end of the first ROM as
; before, but with added bytes for a variables 1 and 2 parts.
; The intent is to allow for any program to be made into a cartridge from its P
; file. The loader is $B5 bytes long, so still ends before $100, but is longer
; than the short 1 block program loader, of course.

; Cartridge 8K ROM origins
ROM_A: equ  $2000
ROM_B: equ  $8000

; System variables
FLAGS:  equ $4001
ERR_SP: equ $4002
RAMTOP: equ $4004
PPC:    equ $4007
D_FILE: equ $400c
VARS:   equ $4010
E_LINE: equ $4014
CH_ADD: equ $4016
STKEND: equ $4022
NXTLIN: equ $4029
OLDPPC: equ $402B
CDFLAG: equ $403b
PROG:   equ $407d

NEWLINE: equ $76

; ROM Routines
SLOW_FAST:  equ 0x0207 ;
NEXT_LINE:  equ 0x066c ;
MAKE_ROOM:  equ 0x099e ;
CLS:        equ 0x0a2a ;
CLEAR:      equ 0x149a ; 
CURSOR_IN:  equ 0x14ad ; 

; Start

org ROM_A

ld bc, $0000        ; So first byte contains 0x01
out ($fd),a
di
; This clears RAM from RAMTOP-1 down to $4000, which includes the system
; variables, so we have to save RAMTOP in de register to put back after.
; This is much like the RAM check routine at $03CB that is part of the NEW
; command, but it omits checking the RAM. That will have already been done, so
; this is just clearing it.
; Uses: hl (clearing addr), de (saves RAMTOP), a (check value)
ld hl,(RAMTOP)
ld d,h              ; de=hl
ld e,l              ; Copy RAMTOP to de (it was already set)
dec hl              ; hl = RAMTOP-1
ld a,0x3f           ; High-byte val to check on hl
LOOPA:
ld (hl),0x00        ; Store $00 there
dec hl
cp h                ; Loop until hl=$3fff (h=$3f)
jr nz, LOOPA
ex de,hl            ; Get RAMTOP back from de
ld (RAMTOP),hl      ; Set RAMTOP back after clearing sys vars area
dec hl              ; hl = RAMTOP-1
ld (hl),0x3e        ; Put $3e at top of BASIC RAM
dec hl              ;
ld sp,hl            ; Point sp just below that
dec hl              ;
dec hl              ;
ld (ERR_SP),hl      ; Set address of first item on machine stack
; Other setup
; Uses a, i, iy (set to $4000), hl, de, bc
ld a,0x1e
ld i,a
im 1                ; Interrupt mode 1
ld iy,0x4000        ; Set index to start of RAM

; Set CDFLAG
ld a,(PCDFLAG)      ; Get CDFLAG value stored at end of ROM
ld (iy+0x3b),a      ; Set CDFLAG to stored value

; First program block
ld bc,(PROG1L)      ; Get length of block to copy
ld a,b
or c
jr z, MAKEDFILE     ; Skip prog block copy for bc==0 (probably vars only)
ld hl,(PROG1S)      ; Get block source from end of rom
ld de,PROG          ; Set block destination to start of program (16509)
ldir                ; Copy first program block

; Copy second prog block
ld bc,(PROG2L)      ; Load bc with length of 2nd program block
ld a,b
or c
jr z, MAKEDFILE     ; Skip copy for bc==0
ld hl,(PROG2S)      ; Get source address of 2nd program block
ldir                ; Copy program block 2

MAKEDFILE:
ex de,hl            ; hl <=> de, which is dest byte after program (D_FILE should start there)
;dec hl              ; Chess inserts a dec hl here, why? The others don't
ld (D_FILE),hl      ; Set D_FILE location to be after the program
ld b,25             ; Set it up as 25 newlines
ld a,NEWLINE        ; for a collapsed display file.
DNL:
ld (hl),a           
inc hl
djnz DNL
ld (VARS),hl        ; Point VARS to just after display file

; Do some setup with an empty display and variables
call CLEAR          ; ROM: clears the variable area (sets hl and E_LINE)
call CURSOR_IN      ; ROM: sets up lower screen to 2 lines and clear calc stack (uses hl)
call SLOW_FAST      ; ROM: test CDFLAG bit 6 to set mode (uses hl, a, b)
call CLS            ; ROM: will expand a collapsed display file if enough RAM (uses bc, a, hl, de)

; First variables block check
ld bc,(VARS1L)      ; Get variables block 1 length
; If bc==0, no vars block, so skip vars loading
ld a,b
or c
jr z, AUTORUN       ; Skip vars copy for bc==0

; Make room for total variables length
ld hl,(VARS2L)      ; Get variables block 2 length
add hl,bc           ; hl=hl+bc = Total vars size
ld b,h              ; bc = hl = total vars length
ld c,l              ; so we can make room for the vars bytes
ld hl,(E_LINE)      ; Get E_LINE
dec hl              ; Point to the $80 byte at end of current vars
call MAKE_ROOM      ; ROM: Insert bc spaces at hl, making room for the vars block. (uses a, hl, de, bc)
inc hl              ; Point to VARS (hl points to one below the insert point after the LDDR)
ex de,hl		    ; de=hl to set the destination (VARS) for the vars block

; First variables block
ld hl,(VARS1S)      ; Get variables block 1 source address
ld bc,(VARS1L)      ; Get variables block 1 length
ldir                ; Copy the vars block 1

; Second variables block
ld bc,(VARS2L)      ; Get varaibles block 2 length
; If bc==0, no vars block 2, so skip loading
ld a,b
or c
jr z, AUTORUN       ; Skip vars 2 copy for bc==0
ld hl,(VARS2S)      ; Get variables block 2 source address
ldir                ; Copy the vars block 2

AUTORUN:
ld bc,(AUTOLN)      ; Get program line to start
ld de,(AUTOAD)      ; Get program address to start - this comes from NXTLIN
ld h,d              ; hl=de so hl sets NXTLIN when we call NEXT-LINE at the end
ld l,e
dec de              ; CH_ADD points to one less than NXTLIN
ld (CH_ADD),de      ; Set address of next char to be interpreted
ld (PPC),bc         ; Set line number of statement being executed

; DF_SZ, FLAGS
ld (iy+022h),0x02   ; Load DF_SZ with 2 lines for lower screen
ld (iy+001h),080h   ; Load FLAGS with $80

; Mark we were here
ld a,0xff
ld (PROG-1),a       ; We set the usused system variable byte before the first line to $FF (this lets us know we've loaded from ROM)

; Start BASIC
jp NEXT_LINE        ; ROM: Jump into BASIC. Reads NXTLIN to get address of next BASIC line

; Loader variables
; I don't include these in the loader code arrays and assume they follow it. I
; get the length of the loader code and add that to offsets that define these in
; the C program. For example, PROG1S is offset 0, so it would have the length of
; the loader added to it to get the offset in the ROM image for storing the
; value, and in the assembler, these here get the correct memory address. The 4
; PROG and VARS values come first as they are common to the loaders.

PROG1S:  defw 0x0000 ; 1st program block source address
PROG1L:  defw 0x0000 ; 1st program block length
PROG2S:  defw 0x0000 ; 2nd program block source address
PROG2L:  defw 0x0000 ; 2nd program block length
VARS1S:  defw 0x0000 ; 1st VARS block source address
VARS1L:  defw 0x0000 ; 1st VARS block length
VARS2S:  defw 0x0000 ; 2nd VARS block source address
VARS2L:  defw 0x0000 ; 2nd VARS block length
AUTOAD:  defw 0x0000 ; Auto start address (for NXTLIN)
AUTOLN:  defw 0x0000 ; Auto start line number
PCDFLAG: defb 0x00   ; Value for CDFLAG


end
